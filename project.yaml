heat_template_version: 2014-10-16

description: >
  This is a simple template that illustrates the basic autoscalling group
  which resource is a web server.
  
parameters:
  key_name:
    type: string
    description: Name of an existing key pair to use for the instances
    default: mengyangyukey
  flavor:
    type: string
    description: Flavor for the instances to be created
    default: m1.medium
  image:
    type: string
    default: ECE1548.OFLab
    description: Name or ID of the image to use for the instances.
  
  db_name:
    type: string
    description: database name
    default: jess-db
    constraints:
      - length: { min: 1, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters

  db_username:
    type: string
    description: The WordPress database admin account username
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 16 }
        description: db_username must be between 1 and 16 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_username must begin with a letter and contain only alphanumeric
          characters

  db_password:
    type: string
    description: The WordPress database admin account password
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_password must contain only alphanumeric characters

  db_root_password:
    type: string
    description: Root password for MySQL
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 41 }
        description: db_root_password must be between 1 and 41 characters
      - allowed_pattern: '[a-zA-Z0-9]*'
        description: db_root_password must contain only alphanumeric characters
    

resources:
  LoadServer:
    type: OS::Nova::Server
    properties:
      name: jess-load
      image: ECE1548.OFLab
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      networks:
        - network: ece1548-net
      security_groups:
        - mengyangyu
        - default
      user_data: |
         #!/bin/bash

         # Updates network interfaces file to bring up second interface
         cat <<EOF >>/etc/network/interfaces

         auto eth1
         iface eth1 inet dhcp
         EOF

         # Restart networking
         service networking restart

         # Set up NAT (enable IP forwarding and IP masquerading)
         echo "1" > /proc/sys/net/ipv4/ip_forward
         /sbin/iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
         /sbin/iptables -A FORWARD -i eth0 -o eth1 -m state
         /sbin/iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT

  DatabaseServer:
    type: OS::Nova::Server
    properties:
      image: Ubuntu64-mysql-OVS
      flavor: { get_param: instance_type }
      security_groups:
        - {get_resource: SecurityGroup}
        - default
      key_name: { get_param: key_name }
      networks:
        - network: ece1548-net
      metadata: { }
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            # The below script is partially from DevStack's stack.sh script
            # Script should be run as root
            MYSQL_HOST=localhost
            MYSQL_USER=db_user
            MYSQL_PASSWORD=db_rootpassword

            # Make sure MySQL is fully running before trying to change the password
            service mysql start
            sleep 5


            # Change default database password
            mysqladmin -uroot password $MYSQL_PASSWORD

            # while ``.my.cnf`` is not needed for OpenStack to function, it is useful
            # as it allows you to access the mysql databases via ``mysql nova`` instead
            # of having to specify the username/password each time.
            if [[ ! -e $HOME/.my.cnf ]]; then
                cat <<EOF >$HOME/.my.cnf
            [client]
            user=$MYSQL_USER
            password=$MYSQL_PASSWORD
            host=$MYSQL_HOST
            EOF
                chmod 0600 $HOME/.my.cnf
            fi

            MY_CONF=/etc/mysql/my.cnf
            MYSQL=mysql

            # Update the DB to give user MYSQL_USER full control of the all databases:
            mysql -uroot -p$MYSQL_PASSWORD -h127.0.0.1 -e "GRANT ALL PRIVILEGES ON *.* TO '$MYSQL_USER'@'%' identified by '$MYSQL_PASSWORD';"

            # Now update ``my.cnf`` for some local needs and restart the mysql service

            # Change bind-address from localhost (127.0.0.1) to any (0.0.0.0)
            sudo sed -i '/^bind-address/s/127.0.0.1/0.0.0.0/g' $MY_CONF

            # Set default db type to InnoDB
            if sudo grep -q "default-storage-engine" $MY_CONF; then
                # Change it
                sudo bash -c "source $TOP_DIR/functions; iniset $MY_CONF mysqld default-storage-engine InnoDB"
            else
                # Add it
                sudo sed -i -e "/^\[mysqld\]/ a \
            default-storage-engine = InnoDB" $MY_CONF
            fi

            service $MYSQL restart

            cat << EOF | mysql -u root --password=db_rootpassword
            CREATE DATABASE db_name;
            GRANT ALL PRIVILEGES ON db_name.* TO "db_user"@"%"
            IDENTIFIED BY "db_password";
            FLUSH PRIVILEGES;
            EXIT
            EOF


          params:
            db_rootpassword: { get_param: db_root_password }
            db_name: { get_param: db_name }
            db_user: { get_param: db_username }
            db_password: { get_param: db_password }         
         
  mon-vm:
    type: OS::Heat::AutoScalingGroup
    properties:
      resource:
        type: OS::Nova::Server::Myserver
        properties:
          name: jess-server
          key_name: { get_param: key_name }
          image: { get_param: image }
          flavor: { get_param: flavor }
          security_groups:
            - default
            - mengyangyu
          networks:
            - network: ece1548-net
            # See comment block at bottom regarding metadata
          metadata: {"metering.stack": {get_param: "OS::stack_id"}}
        
  
      min_size: 1
      max_size: 2


  scale_up_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: mon-vm}
      cooldown: 60
      scaling_adjustment: 1

  scale_down_policy:
    type: OS::Heat::ScalingPolicy
    properties:
      adjustment_type: change_in_capacity
      auto_scaling_group_id: {get_resource: mon-vm}
      cooldown: 60
      scaling_adjustment: -1

  cpu_alarm_high:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-up if the average CPU > 40% for 60 seconds
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 40
      alarm_actions:
        - {get_attr: [scale_up_policy, alarm_url]}
      # See comment block at bottom regarding metadata
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: gt

  cpu_alarm_low:
    type: OS::Ceilometer::Alarm
    properties:
      description: Scale-down if the average CPU < 10% for 60 seconds
      meter_name: cpu_util
      statistic: avg
      period: 60
      evaluation_periods: 1
      threshold: 10
      alarm_actions:
        - {get_attr: [scale_down_policy, alarm_url]}
      # See comment block at bottom regarding metadata
      matching_metadata: {'metadata.user_metadata.stack': {get_param: "OS::stack_id"}}
      comparison_operator: lt
  

outputs:
  server_ips:
    description: >
      List of IP addresses of each VM.
    value: {get_attr: ['mon-vm', 'outputs_list', 'first_address']}
  scale_up_url:
    description: >
      This URL is the webhook to scale up the group.  You can invoke
      the scale-up operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_up_policy, alarm_url]}
  scale_dn_url:
    description: >
      This URL is the webhook to scale down the group.  You can invoke
      the scale-down operation by doing an HTTP POST to this URL; no
      body nor extra headers are needed.
    value: {get_attr: [scale_down_policy, alarm_url]}
